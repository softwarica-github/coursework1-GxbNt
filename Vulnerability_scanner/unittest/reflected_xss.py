import unittest
from unittest.mock import patch, MagicMock
import requests
import threading
import Main  
from Main import test_reflected_xss_payloads

class TestReflectedXSSPayloads(unittest.TestCase):

    @patch('Main.requests.post')
    def test_reflected_xss_payloads(self, mock_post):
        # Define the mock response for requests.post
        mock_response = MagicMock()
        mock_response.text = 'Some text XSS'
        mock_post.return_value = mock_response

        # Define test URL and payloads
        url = "http://example.com"
        payloads = ["<script>alert('XSS')</script>", "<img src=x onerror=alert('XSS')>"]

        # Call the function
        test_reflected_xss_payloads(url, payloads)

        # Assert that requests.post was called with the correct arguments for each payload
        expected_calls = [((url,), {'data': {'message': payload.strip()}}) for payload in payloads]
        mock_post.assert_has_calls(expected_calls, any_order=True)

if __name__ == '__main__':
    unittest.main()
