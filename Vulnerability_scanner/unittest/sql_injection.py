import unittest
from unittest.mock import patch, Mock
from Main import test_sql_injection_payloads

class TestSQLInjectionPayloads(unittest.TestCase):

    @patch('Main.requests')
    @patch('Main.print_success')
    def test_injecting_into_url_parameters(self, mock_print_success, mock_requests):
        url = 'http://example.com/login'
        payloads = ['admin', "' OR '1'='1"]
        method = '1'

        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = 'Welcome'
        mock_requests.get.return_value = mock_response

        test_sql_injection_payloads(url, payloads, method)

        for payload in payloads:
            expected_call = f"URL: {url} - Payload: {payload} - SQL Injection (Method {method}) - Vulnerable"
            mock_print_success.assert_any_call(expected_call)

    @patch('Main.requests')
    @patch('Main.print_success')
    def test_injecting_into_post_form_data(self, mock_print_success, mock_requests):
        url = 'http://example.com/login'
        payloads = ['admin', "' OR '1'='1"]
        method = '2'

        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = 'Welcome'
        mock_requests.post.return_value = mock_response

        test_sql_injection_payloads(url, payloads, method)

        for payload in payloads:
            expected_call = f"URL: {url} - Payload: {payload} - SQL Injection (Method {method}) - Vulnerable"
            mock_print_success.assert_any_call(expected_call)

    @patch('Main.requests')
    @patch('Main.print_success')
    def test_injecting_into_cookies(self, mock_print_success, mock_requests):
        url = 'http://example.com/login'
        payloads = ['admin', "' OR '1'='1"]
        method = '3'

        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.text = 'Welcome'
        mock_requests.get.return_value = mock_response

        test_sql_injection_payloads(url, payloads, method)

        for payload in payloads:
            expected_call = f"URL: {url} - Payload: {payload} - SQL Injection (Method {method}) - Vulnerable"
            mock_print_success.assert_any_call(expected_call)

    @patch('Main.print_error')
    def test_invalid_method(self, mock_print_error):
        url = 'http://example.com/login'
        payloads = ['admin']
        method = '4'  # Invalid method

        test_sql_injection_payloads(url, payloads, method)

        mock_print_error.assert_called_once_with("Invalid SQL injection method. Please enter either '1', '2', or '3'.")

if __name__ == '__main__':
    unittest.main()
