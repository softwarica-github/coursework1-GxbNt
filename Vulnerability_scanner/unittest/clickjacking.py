import unittest
from unittest.mock import MagicMock, patch
from Main import test_clickjacking

class TestClickjacking(unittest.TestCase):

    @patch('requests.get')
    def test_clickjacking_vulnerable(self, mock_get):
        url = "http://example.com"
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.headers = {'X-Frame-Options': 'deny'}
        mock_get.return_value = mock_response

        with patch('Main.print_warning') as mock_print_warning, \
             patch('Main.print_success') as mock_print_success:
            test_clickjacking(url)

            mock_print_warning.assert_called_with(f"URL: {url} - X-Frame-Options is set to deny. Clickjacking may be mitigated.")
            mock_print_success.assert_not_called()

    @patch('requests.get')
    def test_clickjacking_not_vulnerable(self, mock_get):
        url = "http://example.com"
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.headers = {'Content-Security-Policy': 'frame-ancestors \'none\''}
        mock_get.return_value = mock_response

        with patch('Main.print_warning') as mock_print_warning, \
             patch('Main.print_success') as mock_print_success:
            test_clickjacking(url)

            mock_print_warning.assert_called_with(f"URL: {url} - Content-Security-Policy is set. Clickjacking may be mitigated.")
            mock_print_success.assert_not_called()

    @patch('requests.get')
    def test_clickjacking_no_header(self, mock_get):
        url = "http://example.com"
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_get.return_value = mock_response

        with patch('Main.print_success') as mock_print_success:
            test_clickjacking(url)

            mock_print_success.assert_called_with(f"URL: {url} - No Clickjacking vulnerability detected.")

    @patch('requests.get')
    def test_clickjacking_unexpected_status(self, mock_get):
        url = "http://example.com"
        mock_response = MagicMock()
        mock_response.status_code = 404
        mock_get.return_value = mock_response

        with patch('Main.print_warning') as mock_print_warning:
            test_clickjacking(url)

            mock_print_warning.assert_called_with(f"URL: {url} - Unexpected response status code: 404")

if __name__ == '__main__':
    unittest.main()
