import unittest
from unittest.mock import patch, Mock
import Main

class TestDomBasedXSSPayloads(unittest.TestCase):

    @patch('Main.webdriver')
    @patch('Main.WebDriverWait')
    @patch('Main.By')
    @patch('Main.EC')
    def test_dom_based_xss_payloads(self, mock_EC, mock_By, mock_WebDriverWait, mock_webdriver):
        # Mock the necessary objects
        mock_browser = 'chrome'
        mock_payloads = ['<script>alert("XSS")</script>']
        mock_driver = Mock()
        mock_wait = Mock()
        mock_element = Mock()
        mock_submit_button = Mock()
        
        mock_WebDriverWait.return_value = mock_wait
        mock_driver.page_source = '<html><body><script>alert("XSS")</script></body></html>'
        mock_wait.until.return_value = mock_element
        mock_driver.find_element.return_value = mock_submit_button
        mock_webdriver.Chrome.return_value = mock_driver  # Ensure consistent mock_driver object

        # Execute the function
        Main.test_dom_based_xss_payloads('http://example.com', mock_payloads, mock_browser)

        # Assertions
        mock_WebDriverWait.assert_called_once_with(mock_driver, 10)
        mock_wait.until.assert_called_once_with(mock_EC.presence_of_element_located(('ID', 'message')))
        mock_driver.execute_script.assert_any_call("arguments[0].value = arguments[1]", mock_element, mock_payloads[0])
        mock_driver.execute_script.assert_any_call("arguments[0].click()", mock_submit_button)
        mock_driver.implicitly_wait.assert_called_once_with(5)
        self.assertIn('XSS', mock_driver.page_source)

if __name__ == '__main__':
    unittest.main()