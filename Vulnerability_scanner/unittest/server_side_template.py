import unittest
import re
import requests
from unittest.mock import patch, Mock
from Main import test_server_side_template_injection

class TestServerSideTemplateInjection(unittest.TestCase):
    
    @patch('requests.post')
    def test_ssti_vulnerable(self, mock_post):
        url = "http://example.com"
        payloads = ["{{7*7}}", "{{7*'7'}}", "{{7*'7' if 'x' else 0}}"]
        
        mock_response = Mock()
        mock_response.text = "SSTI_SUCCESS"
        mock_post.return_value = mock_response
        
        # Call the function
        with patch('builtins.print') as mocked_print:
            test_server_side_template_injection(url, payloads)
        
        # Assertions
        expected_calls = [
            "Payload: {{7*7}} - Server-Side Template Injection FOUND!",
            "Payload: {{7*'7'}} - Server-Side Template Injection FOUND!",
            "Payload: {{7*'7' if 'x' else 0}} - Server-Side Template Injection FOUND!"
        ]
        actual_calls = [re.sub(r'\x1b\[\d+m', '', call[0][0]) for call in mocked_print.call_args_list]
        self.assertEqual(actual_calls, expected_calls)

    @patch('requests.post')
    def test_ssti_not_vulnerable(self, mock_post):
        url = "http://example.com"
        payloads = ["{{7*7}}", "{{7*'7'}}", "{{7*'7' if 'x' else 0}}"]
        
        mock_response = Mock()
        mock_response.text = "Some regular response"
        mock_post.return_value = mock_response
        
        # Call the function
        with patch('builtins.print') as mocked_print:
            test_server_side_template_injection(url, payloads)
        
        # Assertions
        expected_calls = [
            "Payload: {{7*7}} - Not Vulnerable",
            "Payload: {{7*'7'}} - Not Vulnerable",
            "Payload: {{7*'7' if 'x' else 0}} - Not Vulnerable"
        ]
        actual_calls = [re.sub(r'\x1b\[\d+m', '', call[0][0]) for call in mocked_print.call_args_list]
        self.assertEqual(actual_calls, expected_calls)
        
if __name__ == "__main__":
    unittest.main()
