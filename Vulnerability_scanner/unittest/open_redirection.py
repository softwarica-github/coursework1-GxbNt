import unittest
import re
from unittest.mock import patch
from Main import test_open_redirection_payloads, print_success, print_warning, print_error

class TestOpenRedirectionPayloads(unittest.TestCase):

    def remove_ansi_escape(self, text):
        """
        Removes ANSI escape codes from the given text.
        """
        ansi_escape = re.compile(r'\x1b\[[0-9;]*m')
        return ansi_escape.sub('', text)

    @patch('builtins.print')
    def test_open_redirection_vulnerable(self, mocked_print):
        url = "http://example.com"
        payloads = ["http://malicious.com"]
        
        # Mocking requests.get to return a mock response
        with patch('requests.get') as mocked_get:
            mocked_get.return_value.status_code = 302
            mocked_get.return_value.headers = {'Location': 'http://redirected.com'}
            
            test_open_redirection_payloads(url, payloads)
            
            # Assertions
            expected_output = self.remove_ansi_escape(f"Payload: {payloads[0]} - Open Redirection FOUND!")
            actual_output = self.remove_ansi_escape(mocked_print.call_args_list[0].args[0])
            self.assertIn(expected_output, actual_output)

    @patch('builtins.print')
    def test_open_redirection_not_vulnerable(self, mocked_print):
        url = "http://example.com"
        payloads = ["http://safe.com"]
        
        # Mocking requests.get to return a mock response
        with patch('requests.get') as mocked_get:
            mocked_get.return_value.status_code = 200
            
            test_open_redirection_payloads(url, payloads)
            
            # Assertions
            expected_output = self.remove_ansi_escape(f"Payload: {payloads[0]} - Not Vulnerable")
            actual_output = self.remove_ansi_escape(mocked_print.call_args_list[0].args[0])
            self.assertIn(expected_output, actual_output)

if __name__ == '__main__':
    unittest.main()
